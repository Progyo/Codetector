import time
import datetime
from codetector.src.features.shared.domain.entities.dataset.filter import Filter
from codetector.src.features.shared.domain.entities.samples.sample import Sample
from codetector.src.features.shared.domain.entities.tokenizer import Tokenizer
from ..code_detection_sample_model import CodeDetectionSampleModel
from ..code_samples import CodeSampleModel
# import tiktoken
import pickle

# TOKENIZER = tiktoken.get_encoding("cl100k_base")

class AfterDateFilter(Filter):
    """
    A filter that filters out any samples before the given date.
    """


    def __init__(self,date:int=None, ymd: tuple[int,int,int] = None) -> None:
        super().__init__()

        if ymd != None:
            y,m,d = ymd
            d = datetime.date(y,m,d)

            self.__date = time.mktime(d.timetuple())

        if date != None:
            self.__date = date


    def isAllowed(self, sample:Sample, index:int=None) -> bool:
        return sample.timestamp > self.__date
    



class BeforeDateFilter(Filter):
    """
    A filter that filters out any samples after the given date.
    """

    def __init__(self,date:int=None, ymd: tuple[int,int,int] = None) -> None:
        super().__init__()

        if ymd != None:
            y,m,d = ymd
            d = datetime.date(y,m,d)

            self.__date = time.mktime(d.timetuple())

        if date != None:
            self.__date = date


    def isAllowed(self, sample:Sample, index:int=None) -> bool:
        return sample.timestamp < self.__date
    


class PLFilter(Filter):
    """
    A filter that filters out any code samples that aren't
    in the target programming languages.
    """


    def __init__(self,languages:list[type[CodeSampleModel]]) -> None:
        super().__init__()
        self.__languages = languages

    def isAllowed(self, sample:CodeSampleModel|CodeDetectionSampleModel, index:int=None) -> bool:

        if isinstance(sample, CodeSampleModel):
            return type(sample) in self.__languages
        elif isinstance(sample, CodeDetectionSampleModel):
            return CodeSampleModel.fromLanguage(sample.language) in self.__languages
        else:
            raise Exception('Cannot apply PLFilter to non code sample!')
        

class LengthFilter(Filter):
    """
    A filter that filters out any samples that aren't
    in the length range.
    """

    def __init__(self,range:range, tokenizer:Tokenizer) -> None:
        super().__init__()
        
        self.__range = range
        self.__tokenizer = tokenizer

    def isAllowed(self, sample:Sample, index:int=None) -> bool:
        return len(self.__tokenizer.encode(sample.content)) in self.__range


class DistributionFilter(Filter):
    """
    A filter that filters out any samples that aren't
    in the given distribution (Generated by `DatasetHelper`).
    """

    __hashList : list[str]

    def __init__(self,hashList:list[str]|str) -> None:
        super().__init__()
        
        if isinstance(hashList, list):
            self.__hashList = hashList

        elif isinstance(hashList,str):
            with open(hashList,'rb') as f:
               self.__hashList = pickle.load(f)
        else:
            raise Exception('Invalid parameter for distribution filter!')

    def isAllowed(self, sample:Sample, index:int=None) -> bool:
        return sample.getHash() in self.__hashList
    

class IndexFilter(Filter):
    """
    A filter that filters out any samples that aren't
    in the index range.
    """

    def __init__(self,range:range) -> None:
        super().__init__()
        
        self.__range = range

    def isAllowed(self, sample:Sample, index:int=None) -> bool:
        return index in self.__range